// 2020-02-22 13:26:38
#event properties (no comments/etc. here are saved)
parent_index = -1;
persistent = true;
uses_physics = false;

#event create 

SaveState = ds_map_create();

Items = ds_map_create();

//Battle Stage Variables
Enemy = noone;
EnemyKey = 0;

CurrentSave = "Save1";

LoadGame = false;

#event other_room_end

//Save game if player is in main area
if(room != rmTitle && room != rmLoad && room != rmGameOver)
    scrGameSave("TempSave");

#event other_room_start

//Check enemies in the room and update their position with the pos on file
with(oEnemyParent)
{
    var GridString = ds_map_find_value(oAreaStats.SaveState,room_get_name(room)+"Enemy");
    if(GridString != undefined)
    {
        var Grid = ds_grid_create(0,0);
        ds_grid_read(Grid,GridString);
        for(var i=0;i<ds_grid_height(Grid);i++)
        {
            if (ds_grid_get(Grid,0,i) == Key)
            {
                x = ds_grid_get(Grid,1,i);
                y = ds_grid_get(Grid,2,i);
                Health = ds_grid_get(Grid,3,i);
                i = ds_grid_height(Grid);
                show_debug_message(string(Health));
            }
        }
    }
}

//Check triggers and update the ones that were already used
with(oTriggerParent)
{
    var GridString = ds_map_find_value(oAreaStats.SaveState,room_get_name(room)+"Trigger");
    if(GridString != undefined)
    {
        var Grid = ds_grid_create(0,0);
        ds_grid_read(Grid,GridString);
        for(var i=0;i<ds_grid_height(Grid);i++)
        {
            if (ds_grid_get(Grid,0,i) == Key)
            {
                Used = ds_grid_get(Grid,1,i);
            }
        }
    }
}
//Check NPC's and update the ones that were already used
with(oNPCParent)
{
    var GridString = ds_map_find_value(oAreaStats.SaveState,room_get_name(room)+"Trigger");
    if(GridString != undefined)
    {
        var Grid = ds_grid_create(0,0);
        ds_grid_read(Grid,GridString);
        for(var i=0;i<ds_grid_height(Grid);i++)
        {
            if (ds_grid_get(Grid,0,i) == Key)
            {
                Used = ds_grid_get(Grid,1,i);
            }
        }
    }
}
