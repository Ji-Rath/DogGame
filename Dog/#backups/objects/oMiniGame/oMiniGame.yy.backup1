// 2020-05-24 12:47:08
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create

GameType = 0;
timer[0] = 1*60; //Wait 1 second before spawning characters
timer[1] = -1 //MiniGame time

//Instances to destroy after the minigame
Instances = ds_list_create();

//Open Effect
OpenEffect = 0;
OpenFraction = 0;
Destroy = false;
ShowEnemy = false;
EndTurn = true;

enum Game
{
    CrabAttack,
    Crab1,
    GlovesOff,
    Hamburger,
    Chips,
    PanAttack,
    BroomAttack
}
alarm[0] = 1;

#event alarm0

//Switch to the specified minigame
switch(GameType)
{
    case Game.CrabAttack:
        ds_list_add(Instances, instance_create_layer(room_width/4,room_height/2,"Instances",oPlayerBoob));
        ds_list_add(Instances, instance_create_layer(room_width/1.5,room_height/2,"Instances",oEnemyCrabArm));
    break;
    
    case Game.Crab1:
        ds_list_add(Instances, instance_create_layer(room_width/2,room_height/2+50,"Instances",oCrab1Arm));
        ds_list_add(Instances, instance_create_layer(room_width/2,room_height/2-50,"Instances",oCrab1Player));
    break;
    
    case Game.GlovesOff:
        ds_list_add(Instances, instance_create_layer(room_width/2,room_height/2,"Instances",oPlayerGloveSmack));
    break;
    
    case Game.Chips: 
        ds_list_add(Instances, instance_create_layer(room_width/2,room_height/2+200,"Instances",oChipBag));
    break;
    
    case Game.PanAttack:
        ds_list_add(Instances, instance_create_layer(room_width/2+300,room_height/2,"Instances",oPan));
    break;
    
    case Game.BroomAttack:
        ds_list_add(Instances, instance_create_layer(room_width/2,room_height/2,"Instances",oBroom));
    break;
}


#event step

if(!Destroy)
{
    
    if(OpenEffect != 1)
    {
        OpenFraction += (2*pi)/120;
    }
}
else
{
    if(OpenEffect != 0)
    {
        OpenFraction -= (2*pi)/60;
    }
    else
    {
        //Destroy self and instances created for the minigame
        instance_destroy();
        for(var i=0;i<ds_list_size(Instances);i++)
        {
            var Instance = ds_list_find_value(Instances,i);
            if(instance_exists(Instance))
            {
                instance_destroy(Instance);
            }
        }
    }
}
OpenEffect = sin(OpenFraction);

//After set time, execute game
if(timer[0] > 0)
{
    timer[0] -= 1;
}
else if (timer[0] != -1)
{
    timer[0] = -1;
    timer[1] = 4*60;
}

//End of minigame
if(timer[1] > 0)
{
    timer[1] -= 1;
}
else if (timer[1] != -1)
{
    //Prevent decimals
    with(oBattleManager)
    {
        global.phealth = ceil(global.phealth);
        global.pp = ceil(global.pp);
        EnemyBattle.Health = ceil(EnemyBattle.Health);
    }
    Destroy = true;
    if(EndTurn)
    {
        oBattleManager.BattleStageEnd = true;
    }
    else
    {
        oBattleManager.UpdateStats = true;
        oBattleManager.visible = true;
        oBattleMenuParent.visible = true;
        oBattleManager.BattleTimer = oBattleManager.BattleTimerInit*60;
    }
    timer[1] = -1;
}

#event draw

//Draw MiniGame Boundries
draw_set_color(c_ltgray);
draw_roundrect(room_width/2+500,room_height/2+(250*OpenEffect),room_width/2-500,room_height/2-(250*OpenEffect),false)
draw_set_color(c_white);

for(i=0;i<ds_list_size(Instances);i++)
{
    with(ds_list_find_value(Instances,i))
    {
        image_alpha = oMiniGame.OpenEffect;
    }
}