// 2020-06-19 01:08:28
#event properties (no comments/etc. here are saved)
parent_index = -1;
mask_index = sBattleIcons;
uses_physics = false;

#event create

SpriteIndex = 0;
Selected = false;
IsHovering = false;
ItemMouseHover = false;
ItemMouseHoverSelect = 0;

enum BattleState
{
    Idle,
    Attack,
    Finish
}

//Contents of button
Contents = ds_list_create();

//Start invisible
visible = false;

//Rotation when icon selected
RotValue = 0;
Rot = 0;

//Add available items to ds list
for(var i=0;i<Item.LastItem;i++)
{
    if(i != Item.LastItem)
    {
        var GroupCheck = oBattleManager.ItemDescription[i];
        var ItemCount = ds_map_find_value(oAreaStats.Items, i);
        
        //Check if ItemIndex matches with the looping item
        if(GroupCheck[3] == ItemIndex && ItemCount > 0)
        {
            ds_list_add(Contents,i);
        }
    }
}

#event step


if(visible && Selected)
{
    //Rotate effect
    Rot += (2*pi)/120;
    RotValue = sin(Rot);
    if(Rot > 2*pi)
    {
        Rot = 0;
    }
    
    //Go straight to attacking with attack button (Can probably be optimized in the future)
    if(ItemIndex == 0)
    {
        //Do Action based on item selected
        ItemMouseHoverSelect = ds_list_find_value(Contents,0);
        var ContentArray = oBattleManager.ItemDescription[ItemMouseHoverSelect];
        var ExecuteArray = ContentArray[4];
        var Len = array_length_1d(ExecuteArray)-1;
        show_debug_message("Item ID: "+string(ItemMouseHoverSelect));
        switch(Len)
        {
            case 0: script_execute(ExecuteArray[0]); break;
            case 1: script_execute(ExecuteArray[0],ExecuteArray[1]); break;
            case 2: script_execute(ExecuteArray[0],ExecuteArray[1],ExecuteArray[2]); break;
            case 3: script_execute(ExecuteArray[0],ExecuteArray[1],ExecuteArray[2],ExecuteArray[3]); break;
            case 4: script_execute(ExecuteArray[0],ExecuteArray[1],ExecuteArray[2],ExecuteArray[3],ExecuteArray[4]); break;
            case 5: script_execute(ExecuteArray[0],ExecuteArray[1],ExecuteArray[2],ExecuteArray[3],ExecuteArray[4],ExecuteArray[5]); break;
        }
        
        with(oBattleMenuParent)
        {
            visible = false;
            Selected = false;
        }
        oBattleManager.visible = false;
        oBattleManager.BattleTimer = 0;
        oBattleManager.DrawTimer = 0;
        Selected = false;
        
        //Increase rage
        oBattleManager.RageMeter += 1;
    }
    
    
    
    //If player clicks on one of the buttons
    for(i=0;i<ds_list_size(Contents);i++)
    {
        var XPos = x+100
        var YPos = y-250+(i*75);
        ItemMouseHover = (point_in_rectangle(mouse_x, mouse_y, XPos-32, YPos-32, XPos+32, YPos+32));
        //If mouse is hovered over item, save item and end loop
        if(ItemMouseHover)
        {
            //End for loop
            ItemMouseHoverSelect = ds_list_find_value(Contents,i);
            i = ds_list_size(Contents);
            
            if(mouse_check_button_pressed(mb_left))
            {
                //Do Action based on item selected
                var ContentArray = oBattleManager.ItemDescription[ItemMouseHoverSelect];
                var ExecuteArray = ContentArray[4];
                var Len = array_length_1d(ExecuteArray)-1;
                switch(Len)
                {
                    case 0: script_execute(ExecuteArray[0]); break;
                    case 1: script_execute(ExecuteArray[0],ExecuteArray[1]); break;
                    case 2: script_execute(ExecuteArray[0],ExecuteArray[1],ExecuteArray[2]); break;
                    case 3: script_execute(ExecuteArray[0],ExecuteArray[1],ExecuteArray[2],ExecuteArray[3]); break;
                    case 4: script_execute(ExecuteArray[0],ExecuteArray[1],ExecuteArray[2],ExecuteArray[3],ExecuteArray[4]); break;
                    case 5: script_execute(ExecuteArray[0],ExecuteArray[1],ExecuteArray[2],ExecuteArray[3],ExecuteArray[4],ExecuteArray[5]); break;
                }
                
                with(oBattleMenuParent)
                {
                    visible = false;
                    Selected = false;
                }
                
        		with(oBattleManager)
                {
                    visible = false;
                }
                
                //Increase Rage
                oBattleManager.RageMeter += 1;
            }
        }
    }
}
else
{
    Rot = 0;
    RotValue = 0;
}


#event mouse_left_press
if(visible)
{
    //Disable other Menu's
    with(oBattleMenuParent)
    {
        if(id != other.id)
        {
            Selected = false;
        }
    }
    
    //Reverse clicked Menu State
    Selected = !Selected;
}


#event mouse_enter

IsHovering = true;

#event mouse_leave

IsHovering = false;

#event draw_gui

//Set Fonts/Color
draw_set_font(fnt_battle);
draw_set_color(c_black);
var CanScale = (IsHovering || Selected)
var Scale = 1;
if(CanScale)
{
    Scale *= 1.25;
}



//Draw icon
draw_sprite_ext(sBattleIcons,SpriteIndex,x,y,Scale,Scale,RotValue*25,c_white,1);

//Draw interface
if(Selected)
{
    draw_sprite(sBattleMenu1,0,x,y);
    
    //Draw Contents
    for(i=0;i<ds_list_size(Contents);i++)
    {
        //Draw available contents
        
        var ArrayIndex = ds_list_find_value(Contents,i);
        var DescArray = oBattleManager.ItemDescription[ArrayIndex];
        var ItemCount = ds_map_find_value(oAreaStats.Items, ArrayIndex);
        draw_sprite(DescArray[2],0,x+100,y-250+(i*75));
        if(ItemCount > 1)
        {
            draw_text(x+100,y-250+(i*75),ItemCount);
        }
        
    }
    
    if(ItemMouseHover)
    {
        var DescArray = oBattleManager.ItemDescription[ItemMouseHoverSelect];
        draw_sprite(sBattleMenu2,0,x,y);
        draw_set_font(fnt_stats);
        draw_text(x+80,y-470,DescArray[0]);
        draw_text(x+80,y-420,DescArray[1]);
    }
}
