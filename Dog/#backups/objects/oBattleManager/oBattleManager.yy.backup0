// 2020-07-21 16:58:05
#event properties (no comments/etc. here are saved)
parent_index = -1;
visible = false;
uses_physics = false;

#event create Insert description here
// You can write your code in this editor

//Initialize Itembar variables
scrItems();

//Assign enemy objects to variables and store unique id
EnemyBattle = oAreaStats.EnemyBattle;
EnemyKey = oAreaStats.EnemyKey;

//Current battle stage
BattleStage = 0;

//If true, go to next battle stage
BattleStageEnd = false;

//Mark player portrait position
DPstat = sDPstatnormal;
DPhpx = 170
DPhpy = 17
DPoffy = 50

//Create Enemy Object
EnemyBattle = instance_create_layer(640,390,"Instances",EnemyBattle);

//INTRO TEXT - BATTLE STAGE 0
var FirstText = "A "+string(EnemyBattle.Name) + " has attacked!";
scrCreateBattleBox([FirstText]);

//Create BattleMenu
instance_create_layer(room_width/2-150,room_height-100,"GUI",oBattleMenuAttack);
instance_create_layer(room_width/2-50,room_height-100,"GUI",oBattleMenuBag);
instance_create_layer(room_width/2+50,room_height-100,"GUI",oBattleMenuDefend);
instance_create_layer(room_width/2+150,room_height-100,"GUI",oBattleMenuBook);

//Timer Bar Width
BarWidth = 400;
BattleTimer = 0;
BattleTimerInit = 20;

//Update stats effect
UpdateStats = false;
DrawPlayerHealth = global.PlayerHP;
DrawPlayerPP = global.PlayerPP;
DrawEnemyHealth = EnemyBattle.Health;
DrawTimer = BattleTimer;
timer[0] = -1;

//Shake effect
for(i=0;i<2;i++)
{
	Shake[i] = 0;
}

//Rage meter
RageMeter = 0;

//Value to trigger rage attack
MaxRage = 3;


#event step

//If the current battle stage is done, transition to the next one.
if(BattleStageEnd)
{
	BattleStage++;
	show_debug_message("BattleStage: "+string(BattleStage));
	if(BattleStage == 6)
	{
		BattleStage = 1;
	}
	
	//Check enemy and player health
	if(DrawPlayerHealth <= 0 && BattleStage < 6)
	{
		BattleStage = 9;
	}
	
	if(DrawEnemyHealth <= 0 && BattleStage < 6)
	{
		BattleStage = 7;
	}
	
	switch(BattleStage)
	{
		case 1:
			//ENEMY ATTACK, SEND OVER THE SPECIFIED MINI GAME
			var MiniGame = instance_create_layer(0,0,"GameManager",oMiniGame);
			MiniGame.GameType = EnemyBattle.EnemyAttacks[random_range(0,array_length_1d(EnemyBattle.EnemyAttacks))]
		break;
		
		case 2:
			//Update Stats
			timer[0] = 0.5*60;
			visible = true;
		break;
		
		case 3:
			//Player turn
			with(oBattleMenuParent)
			{
				visible = true;
			}
		break;
		
		case 4:
			//Update Stats
			timer[0] = 0.5*60;
			visible = true;
		break;
		
		case 5:
			//CHATTER BEFORE LOOP
			visible = false;
			var EnemyText = EnemyBattle.TextDuring[random_range(0,array_length_1d(EnemyBattle.TextDuring))];
			scrCreateBattleBox(EnemyText);
		break;
		
		case 7:
			//Victory Text
			
		break;
		
		case 8:
			//PLAYER WINS
			var Room = ds_map_find_value(oAreaStats.SaveState,"Room");
			var EnemyGrid = ds_grid_create(0,0);
			ds_grid_read(EnemyGrid, ds_map_find_value(oAreaStats.SaveState,Room+"Enemy"));
			
			//Find enemy to delete from the room
			for(i=0;i<ds_grid_height(EnemyGrid);i++)
			{
				if(ds_grid_get(EnemyGrid,0,i) == EnemyKey)
				{
					ds_grid_set(EnemyGrid,3,i,0);
					i = ds_grid_height(EnemyGrid);
				}
			}
			ds_map_replace(oAreaStats.SaveState,Room+"Enemy",ds_grid_write(EnemyGrid));
			scrFadeout(asset_get_index(Room),c_black,0.05);
		break;
		
		case 9:
			//PLAYER LOSES
			scrFadeout(rmGameOver,c_red,0.01);
		break;
	}
	BattleStageEnd = false;
}

//Reduce battle timer, and end turn if at 0
if(BattleTimer > 0 && visible && BattleStage == 3 && DrawTimer == BattleTimer)
{
	BattleTimer -= 1;
	if (BattleTimer <= 0)
	{
		BattleStageEnd = true;
		with(oBattleMenuParent)
        {
            visible = false;
            Selected = false;
        }
        visible = false;
	}
	if(BattleStage == 3)
		DrawTimer = BattleTimer;
}

show_debug_message("BattleTimer: "+string(BattleTimer)+" DrawTimer: "+string(DrawTimer));

//Update player stats visually if changed
if(UpdateStats)
{
	var Check = 0;
	var Increment = 0.25;
	
	//Check player health for changes
	if(DrawPlayerHealth > global.PlayerHP)
		DrawPlayerHealth -= Increment;
	if(DrawPlayerHealth < global.PlayerHP)
		DrawPlayerHealth += Increment;
	if(DrawPlayerHealth = global.PlayerHP)
		Check++;
	
	//Check player PP for changes
	if(DrawPlayerPP > global.PlayerPP)
		DrawPlayerPP -= Increment;
	if(DrawPlayerPP < global.PlayerPP)
		DrawPlayerPP += Increment;
	if(DrawPlayerPP = global.PlayerPP)
		Check++;
	
	//Check enemy health for changes
	if(DrawEnemyHealth > EnemyBattle.Health)
		DrawEnemyHealth -= Increment;
	if(DrawEnemyHealth < EnemyBattle.Health)
		DrawEnemyHealth += Increment;
	if(DrawEnemyHealth = EnemyBattle.Health)
		Check++;
	
	//Check timer for changes
	if(DrawTimer > BattleTimer)
		DrawTimer -= Increment*8;
	if(DrawTimer < BattleTimer)
		DrawTimer += Increment*8;
	if(DrawTimer == BattleTimer)
		Check++;
	
	//If all checks done, go to next phase
	if(Check == 4 && timer[0] == -1)
		timer[0] = 0.5*60;
}

//timer management
if(timer[0] > 0)
{
	timer[0] -= 1;
}
else if(timer[0] != -1)
{
	timer[0] = -1;
	if(UpdateStats)
	{
		UpdateStats = false;
		if(BattleStage == 2 || BattleStage == 4)
		{
			BattleStageEnd = true;
			BattleTimer = BattleTimerInit*60;
			DrawTimer = BattleTimer;
		}
	}
	else
	{
		UpdateStats = true;
	}
	if(DrawPlayerHealth > global.PlayerHP)
	{
		Shake[0] = 8;
	}
	if(DrawEnemyHealth > EnemyBattle.Health)
	{
		Shake[1] = 8;
	}
	
	if(oEnemyBattleParent.Vulnerable && BattleStage == 4)
	{
		oEnemyBattleParent.Vulnerable = false;
	}
}

//Shake effect
for(i=0;i<array_length_1d(Shake);i++)
{
	if(Shake[i] > 0)
	{
		Shake[i] /= 1.075;
	}
}

#event draw_gui Insert description here
// You can write your code in this editor

if(visible)
{
	var GUIWidth = display_get_gui_width();
	var GUIHeight = display_get_gui_height();
	
	var PortraitX = 50+choose(Shake[0],-Shake[0]);
	var PortraitY = 50;
	
	//Set color/font
	draw_set_color(c_white);
	draw_set_font(fnt_stats);
	
	//Draw player portrait
	draw_sprite(sGUIPlayerInfo,0,PortraitX,PortraitY);
	draw_sprite(sGUIPlayerInfo,1,PortraitX,PortraitY+100);
	
	//Draw player status
	draw_text(PortraitX+DPhpx,PortraitY+DPhpy,round(DrawPlayerHealth));
	draw_text(PortraitX+DPhpx,PortraitY+DPhpy+DPoffy,round(DrawPlayerPP));
	
	//Draw battle timer
	if((DrawTimer > 0 && BattleStage == 3) || BattleTimer != DrawTimer)
	{
		var TimerPosX = GUIWidth/2;
		var TimerPosY = GUIHeight/1.3;
		var BarHeight = 20;
		
		draw_sprite(sBattleTimer,0,TimerPosX-BarWidth/2-100,TimerPosY);
		draw_set_color(c_black);
		draw_rectangle(TimerPosX-BarWidth/2,TimerPosY+BarHeight/2,TimerPosX+BarWidth/2,TimerPosY-BarHeight/2,false);
		draw_set_color(c_red);
		var BattleTimerNum = ((round(DrawTimer/60/BattleTimerInit*16)/16)*BarWidth);
		draw_rectangle(TimerPosX-BarWidth/2,TimerPosY+BarHeight/2,TimerPosX-BarWidth/2+BattleTimerNum,TimerPosY-BarHeight/2,false);
	}
}

