// 2020-02-13 19:49:21
#event properties (no comments/etc. here are saved)
parent_index = -1;
visible = false;
uses_physics = false;

#event create Insert description here
// You can write your code in this editor

box = sBattleBox;
gui_width = display_get_gui_width();
gui_height = display_get_gui_height();

//Assign enemy objects to variables
OriginalEnemy = oDogPaddler.Attacker;

//Create variables to keep track of battle stage
BattleStage = 0;
BattleStageEnd = false;

//
DPstat = sDPstatnormal;
DPhpx = 170
DPhpy = 17
DPoffy = 50

text_height = string_height("A");


//Create Enemy Object
Enemy = instance_create_layer(640,390,"Instances",oDogPaddler.BattleAttacker);

//Create BattleMenu variables
enum BattleMenu
{
    Attack,
    Bag,
    Defend,
    Book
}
BattleSelect = BattleMenu.Attack;


//INTRO TEXT - BATTLE STAGE 0
var FirstText = string(Enemy.Name) + " has attacked!"
var EnemyTextIntro = Enemy.TextIntro[random_range(0,array_length_1d(Enemy.TextIntro))];

var BattleText = instance_create_layer(x,y,"text",oBattleTextBox); 
BattleText.text = [FirstText,EnemyTextIntro];

//Create BattleMenu
instance_create_layer(room_width/2-150,room_height-100,"GUI",oBattleMenuAttack);
instance_create_layer(room_width/2-50,room_height-100,"GUI",oBattleMenuBag);
instance_create_layer(room_width/2+50,room_height-100,"GUI",oBattleMenuDefend);
instance_create_layer(room_width/2+150,room_height-100,"GUI",oBattleMenuBook);

//Timer Bar Width
BarWidth = 400;
BattleTimer = 0;
BattleTimerInit = 15;

//Update stats effect
UpdateStats = false;
DrawPlayerHealth = global.phealth;
DrawPlayerPP = global.pp;
DrawEnemyHealth = Enemy.Health;
timer[0] = -1;

//Shake effect
for(i=0;i<2;i++)
{
	Shake[i] = 0;
}


#event step

//If the current battle stage is done, transition to the next one.
if(BattleStageEnd)
{
	
	if(Enemy == noone)
	{
		scrFadeout(rmTest,c_black,0.05);
		exit;
	}
	
	BattleStage++;
	if(BattleStage > 5)
	{
		BattleStage = 1;
	}
	
	//Check enemy and player health
	if(DrawPlayerHealth <= 0)
	{
		var BattleText = instance_create_layer(x,y,"text",oBattleTextBox);
		BattleText.text = ["You lose!"];
	}
	
	if(DrawEnemyHealth <= 0)
	{
		var BattleText = instance_create_layer(x,y,"text",oBattleTextBox);
		BattleText.text = ["You Win!"];
		Enemy = noone;
		OriginalEnemy.Health = 0;
	}
	else 
	{
		switch(BattleStage)
		{
			case 1:
				//ENEMY ATTACK, SEND OVER THE SPECIFIED MINI GAME
				var MiniGame = instance_create_layer(0,0,"GameManager",oMiniGame);
				MiniGame.GameType = Enemy.EnemyAttacks[random_range(0,array_length_1d(Enemy.EnemyAttacks))]
			break;
			
			case 2:
				timer[0] = 0.5*60;
				visible = true;
			break;
			
			case 3:
				//Player turn
				with(oBattleMenuParent)
				{
					visible = true;
				}
				BattleTimer = BattleTimerInit*60;
			break;
			
			case 4:
				timer[0] = 0.5*60;
				visible = true;
			break;
			
			case 5:
				//CHATTER BEFORE LOOP
				visible = false;
				var BattleText = instance_create_layer(x,y,"text",oBattleTextBox);
				var EnemyTextDuring = Enemy.TextDuring[random_range(0,array_length_1d(Enemy.TextDuring))];
				BattleText.text = [EnemyTextDuring];
			break;
		}
	}
	BattleStageEnd = false;
}

//Reduce battle timer, and end turn if at 0
if(BattleTimer > 0 && visible && BattleStage == 3)
{
	BattleTimer -= 1;
	if (BattleTimer <= 0)
	{
		BattleStageEnd = true;
		with(oBattleMenuParent)
        {
            visible = false;
            Selected = false;
        }
        visible = false;
	}
}

if(UpdateStats)
{
	var Check = 0;
	var Increment = 0.25;
	if(DrawPlayerHealth > global.phealth)
	{
		DrawPlayerHealth -= Increment;
	}
	if(DrawPlayerHealth < global.phealth)
	{
		DrawPlayerHealth += Increment;
	}
	if(DrawPlayerHealth = global.phealth)
	{
		Check++;
	}
	
	if(DrawPlayerPP > global.pp)
	{
		DrawPlayerPP -= Increment;
	}
	if(DrawPlayerPP < global.pp)
	{
		DrawPlayerPP += Increment;
	}
	if(DrawPlayerPP = global.pp)
	{
		Check++;
	}
	
	if(DrawEnemyHealth > Enemy.Health)
	{
		DrawEnemyHealth -= Increment;
	}
	if(DrawEnemyHealth < Enemy.Health)
	{
		DrawEnemyHealth += Increment;
	}
	if(DrawEnemyHealth = Enemy.Health)
	{
		Check++;
	}
	
	if(Check == 3 && timer[0] == -1)
	{
		timer[0] = 0.5*60;
	}
}

//timer management
if(timer[0] > 0)
{
	timer[0] -= 1;
}
else if(timer[0] != -1)
{
	timer[0] = -1;
	if(UpdateStats)
	{
		UpdateStats = false;
		BattleStageEnd = true;
	}
	else
	{
		UpdateStats = true;
	}
	if(DrawPlayerHealth < global.phealth)
	{
		Shake[0] = 8;
	}
	if(DrawEnemyHealth < Enemy.Health)
	{
		Shake[1] = 10;
	}
}

//Shake effect
for(i=0;i<array_length_1d(Shake);i++)
{
	if(Shake[i] > 0)
	{
		Shake[i] /= 1.075;
	}
}

#event draw_gui Insert description here
// You can write your code in this editor

if(visible)
{
	var GUIWidth = display_get_gui_width();
	var GUIHeight = display_get_gui_height();
	
	var PortraitX = 50+choose(Shake[0],-Shake[0]);
	var PortraitY = 50;
	
	//Set color/font
	draw_set_color(c_white);
	draw_set_font(fnt_stats);
	
	//Draw player portrait
	draw_sprite(sGUIPlayerInfo,0,PortraitX,PortraitY);
	
	//Draw player status
	draw_text(PortraitX+DPhpx,PortraitY+DPhpy,round(DrawPlayerHealth));
	draw_text(PortraitX+DPhpx,PortraitY+DPhpy+DPoffy,round(DrawPlayerPP));
	
	//Draw battle timer
	if(BattleTimer > 0)
	{
		var TimerPosX = GUIWidth/2;
		var TimerPosY = GUIHeight/1.3;
		var BarHeight = 20;
		
		draw_sprite(sBattleTimer,0,TimerPosX-BarWidth/2-100,TimerPosY);
		draw_set_color(c_black);
		draw_rectangle(TimerPosX-BarWidth/2,TimerPosY+BarHeight/2,TimerPosX+BarWidth/2,TimerPosY-BarHeight/2,false);
		draw_set_color(c_red);
		var BattleTimerNum = ((BattleTimer/60/BattleTimerInit)*BarWidth);
		draw_rectangle(TimerPosX-BarWidth/2,TimerPosY+BarHeight/2,TimerPosX-BarWidth/2+BattleTimerNum,TimerPosY-BarHeight/2,false);
	}
}

